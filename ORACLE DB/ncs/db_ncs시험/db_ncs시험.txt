select * from 극장;
/*
극장번호 	극장이름 		위치
1	    대한	    	강남
2	    씨티	    	강남
3	    씨티	    	잠실
4	    CGV	    	서울시 강남구
5	    메가박스	서울시 도봉구
*/

select * from 상영관;
/*
극장번호 상영관번호 영화제목               가격   좌석수
1	    1	    신세계	    9000	35
1	    2	    영웅호걸	    9000	40
3	    3	    러브레터	    9000	10
3	    4	    범죄의 도시	    7000	50
3	    5	    신과 함께	    7500	20
*/

select * from 고객;
/*
고객번호    이름  		주소
1	    양종현	서울시 강동구
2	    김유진	서울시 도봉구
3	    김면혁	서울시 강남구
4	    오지연	서울시 강남구
5	    정현석	서울시 도봉구
*/
select * from 예약;
극장번호 상영관번호 고객번호 좌석번호 날짜
1	    1	        1	    30	19/10/15
2	    1	        2	    25	19/10/15
3	    1	        3	    35	19/10/17
4	    2	        4	    20	20/08/01
4	    3	        3	    10	20/08/01
1	    3	        2	    40	20/08/01
3	    1	        2	    45	20/08/01
2	    2	        1	    50	20/08/01
2	    3	        1	    55	20/08/01
1	    2	        4	    15	20/08/01

create table 극장(
극장번호 number(4) primary key,
극장이름 varchar2(40),
위치 varchar2(40)
);
--Table 극장이(가) 생성되었습니다.

insert into 극장 values(1, '대한', '강남');
insert into 극장 values(2, '씨티', '강남');
insert into 극장 values(3, '씨티', '잠실');
insert into 극장 values(4, 'CGV', '서울시 강남구');
insert into 극장 values(5, '메가박스', '서울시 도봉구');
/*
1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.
*/

select * from 극장;
/*
극장번호 극장이름 위치
1	    대한	    강남
2	    씨티	    강남
3	    씨티	    잠실
4	    CGV	    서울시 강남구
5	    메가박스	서울시 도봉구
*/

create table 상영관(
극장번호 number(4) references 극장(극장번호),
상영관번호 number(4) primary key,
영화제목 varchar2(40),
가격 number(4),
좌석수 number(4)
);
--Table 상영관이(가) 생성되었습니다.

insert into 상영관 values(1, 1, '신세계', 9000, 35);
insert into 상영관 values(1, 2, '영웅호걸', 9000, 40);
insert into 상영관 values(3, 3, '러브레터', 9000, 10);
insert into 상영관 values(3, 4, '범죄의 도시', 7000, 50);
insert into 상영관 values(3, 5, '신과 함께', 7500, 20);
/*
1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


*/
select * from 상영관;
/*
극장번호 상영관번호 영화제목     가격 좌석수
1	    1	    신세계	    9000	35
1	    2	    영웅호걸	    9000	40
3	    3	    러브레터	    9000	10
3	    4	    범죄의 도시	7000	50
3	    5	    신과 함께	    7500	20
*/

create table 고객(
고객번호 number(4) primary key,
이름 varchar2(40),
주소 varchar2(40)
);
--Table 고객이(가) 생성되었습니다.

insert into 고객 values(1, '양종현', '서울시 강동구');
insert into 고객 values(2, '김유진', '서울시 도봉구');
insert into 고객 values(3, '김면혁', '서울시 강남구');
insert into 고객 values(4, '오지연', '서울시 강남구');
insert into 고객 values(5, '정현석', '서울시 도봉구');
/*
1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.


1 행 이(가) 삽입되었습니다.
*/

select * from 고객;
/*
고객번호    이름  주소
1	    양종현	서울시 강동구
2	    김유진	서울시 도봉구
3	    김면혁	서울시 강남구
4	    오지연	서울시 강남구
5	    정현석	서울시 도봉구
*/

create table 예약(
극장번호 number(4) REFERENCES 극장(극장번호), 
상영관번호 number(4) REFERENCES 상영관(상영관번호), 
고객번호 number(4) REFERENCES 고객(고객번호), 
좌석번호 number(4) primary key, 
날짜 DATE
);
--Table 예약이(가) 생성되었습니다.
​
insert into 예약 values(1,1,1,30,to_date('2019-10-15','yyyy-mm-dd'));
insert into 예약 values(2,1,2,25,to_date('2019-10-15','yyyy-mm-dd'));
insert into 예약 values(3,1,3,35,to_date('2019-10-17','yyyy-mm-dd'));
insert into 예약 values(4,2,4,20,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(4,3,3,10,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(1,3,2,40,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(3,1,2,45,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(2,2,1,50,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(2,3,1,55,to_date('2020-08-01','yyyy-mm-dd'));
insert into 예약 values(1,2,4,15,to_date('2020-08-01','yyyy-mm-dd'));

select * from 예약;
극장번호 상영관번호 고객번호 좌석번호 날짜
1	    1	        1	    30	19/10/15
2	    1	        2	    25	19/10/15
3	    1	        3	    35	19/10/17
4	    2	        4	    20	20/08/01
4	    3	        3	    10	20/08/01
1	    3	        2	    40	20/08/01
3	    1	        2	    45	20/08/01
2	    2	        1	    50	20/08/01
2	    3	        1	    55	20/08/01
1	    2	        4	    15	20/08/01


 

가. 극장 데이터베이스 (극장,상영관,예약,고객)테이블를 생성하고 내부조인를 생성하시오.

나. 극장 데이터베이스를 이용하여 단순질의, 집계함수질의, 부속질의와 조인 활용 질의를 보이시오.

- 세부내용 평가도구 참조

다. 그룹함수를 활용하여 극장 데이터베이스의 집계를 산출하시오.

라. 프로시저로 데이터의 더 복잡한 조건의 삽입 작업을 인자 값만 바꾸어 수행할 수도 있고, 저장해두었다가 필요할 때마다 호출하여 사용할 수도 있도록 프로시저를 생성하시오.

(IN) (홍길동.sql로 제출)

마. 극장번호와 상영관번호를 입력받아 가격을 할인해주고 결과를 출력하는 프로시저를 생성하시오. (Discount) (홍길동.sql로 제출)

바. 고객번호가 4일 때 고객이름과 주소를 커서를 사용하여 구하시오. (Addr) (홍길동.sql로 제출)

 

학습목표
관계형 데이터베이스에서 SQL을 사용하여 목적에 적합한 데이터를 정의하고, 조작하며, 제어할 수 있다

 

제출날짜 : 2020.08.11
 

제출 결과물 : MY-SQL 또는 Oracle로 DATA 구현 작업 후 최종 결과물은 “홍길동.sql”로 저장하여 제출

1	극장 데이터베이스 (극장,상영관,예약,고객)테이블과 내부조인을 생성 할 수 있다.	
select * from 극장 natural join 상영관
natural join 예약
natural join 고객;

2	‘서울시 강남구’에 사는 고객의 정보를 보이되 이름을 오름차순으로 검색할 수 있다.	
select 고객번호, 이름, 주소 from 고객
where 주소 like '서울시 강남구'
order by 이름 asc;

3	가격이 8,000원 이하인 영화의 극장번호, 상영관번호, 영화제목을 검색할 수 있다.
select 극장번호, 상영관번호, 영화제목 from 상영관
where 가격 <= 8000;

4	2020년 8월 1일에 영화를 관람한 고객의 수를 검색할 수 있다.
select count(*) from 예약
where 날짜 = '2020-08-01';

5	‘대한’ 극장에서 영화를 본 고객의 이름을 보일 수 있다.
select 고객.이름 from 극장, 예약, 고객
where 극장.극장번호 = 예약.극장번호
and 예약.고객번호 =  고객.고객번호
and 극장이름 like '대한';

6	극장별 상영관 수를 보일 수 있다.
select count(극장번호) from 극장;

7	2020년 8월 1일에 극장별 평균 관람 고객의 수를 보일 수 있다.
select 극장번호, (avg(고객번호)) from 예약
where 날짜 like to_date('2020-08-01', 'yyyy-mm-dd')
group by 극장번호;

8	프로시저로 데이터의 더 복잡한 조건의 삽입 작업을 인자 값만 바꾸어 수행할 수도 있고, 
    저장해두었다가 필요할 때마다 호출하여 사용할 수도 있도록 프로시저를 생성할 수 있다. 
    즉,		
    극장번호와 극장이름을 입력하여 해당 극장이름을 수정하는 프로시저를 생성할 수 있다.(프로시저명: In)
CREATE OR REPLACE PROCEDURE abc
(
    v1 in 극장.극장번호%type,
    v2 in 극장.극장이름%type
)
is
begin
    update 극장
    set 극장이름 = v2
    where 극장번호 = v1;
end abc;
/
--Procedure ABC이(가) 컴파일되었습니다.

9	극장번호와 상영관번호를 입력받아 가격을 할인해주고 결과를 출력하는 프로시저를 생성 할 수 있다. (Discount) (홍길동.sql로 제출)
CREATE OR REPLACE PROCEDURE Discount
(
    v3 in 상영관.극장번호%type,
    v4 in 상영관.상영관번호%type
)
is
begin
    update 상영관
    set 가격 = 가격*0.8;
end Discount;
/
--Procedure DISCOUNT이(가) 컴파일되었습니다.

10	고객번호가 4일 때 고객이름과 주소를 구할 수 있다. (커서 사용) (Addr) (홍길동.sql로 제출)
set serveroutput on
create or replace procedure bbb
is
v1 고객.이름%type;
v2 고객.주소%type;

cursor Addr is
 select 이름, 주소 from 고객
 where 고객번호 = 4; 
begin
 open Addr;
 loop
     fetch Addr into v1, v2;
     exit when Addr%NOTFOUND;
     dbms_output.put_line(v1||' '||v2);
 end loop;
 close Addr;
end bbb;
/
--Procedure BBB이(가) 컴파일되었습니다.