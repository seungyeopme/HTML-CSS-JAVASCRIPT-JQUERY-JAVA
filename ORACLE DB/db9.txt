--2020.08.04

--emp테이블에서 empno, ename, sal을 복사하여 emp3라는 테이블 생성
create table emp3 as select empno, ename, sal from  emp;
--Table EMP3이(가) 생성되었습니다.

select * from emp3;
/*
7839	KING	5000
7566	JONES	2975
7698	BLAKE	2850
7782	CLARK	2450
7788	SCOTT	3000
7902	FORD	3000
7499	ALLEN	1600
7521	WARD	1250
7654	MARTIN	1250
7844	TURNER	1500
7900	JAMES	950
7934	MILLER	1300
7369	SMITH	800
7876	ADAMS	1100
7888	히히히	7000
*/

/*
각각의 변수를 emp테이블에 있는 변수와 같은 타입으로 선언한 후 
사원번호가 7839인 사원번호, 이름 봉급을 추출하여 출력 
*/
set serveroutput on --출력문

declare

v_no emp.empno%type;
v_name emp.ename%type;
v_sal emp.sal%type;

begin
select empno, ename, sal into v_no, v_name, v_sal from emp3
where empno=7839;

dbms_output.put_line(v_no||' '||v_name||' '||v_sal);
end;
/
--PL/SQL 프로시저가 성공적으로 완료되었습니다.

/*===============================================================================*/

/*===============================================================================*/
/*
사원번호, 사원이름, 부서번호를 각각 선언 부서이름은 varchar2(20)로 설정 ->같은타입으로 설정

부서 번호가 10이면 "관리부"
           20이면 "마케팅부"
           30이면 "IT개발부"
*/
set serveroutput on
declare
v_no emp.empno%type;
v_name emp.ename%type;
v_deptno emp.deptno%type;
v_dname varchar2(20);

begin
select empno,ename,deptno
into v_no,v_name,v_deptno
from emp
where empno=7566;

if(v_deptno=10) then v_dname:='관리부';
elsif(v_deptno=20) then v_dname:='마케팅부';
elsif(v_deptno=30) then v_dname:='IT개발부';
end if;

dbms_output.put_line(v_no||' '||v_dname);
end;
/
/*
7566 마케팅부


PL/SQL 프로시저가 성공적으로 완료되었습니다.
*/

set serveroutput on
create or replace procedure pro1
(v_empno in emp.empno%type)
is
v_ename emp.ename%type;
begin
    select ename into v_ename from emp
    where empno = v_empno;
    dbms_output.put_line(v_ename);
exception
when no_data_found then
dbms_output.put_line('없다');
end pro1;
/
--Procedure PRO1이(가) 컴파일되었습니다.
/*===============================================================================*/

/*
사원번호를 emp테이블에 있는 사원번호와 같은 타입으로 설정한 후
이름을 검색해 B로 시작되는 이름이 있는 지 확인한 후 출력해라.

이름이 없으면 해당사항 없다라고 출력.
*/
/*첫번째 방법*/
set serveroutput on
declare
v_empno emp.empno%type;
begin
    select empno into v_empno from emp
    where emp.ename like 'B%';
    dbms_output.put_line(v_empno);
exception
when no_data_found then
dbms_output.put_line('해당사항 없다');
end;
/
--PL/SQL 프로시저가 성공적으로 완료되었습니다.

/*두번째 방법*/
create or replace procedure pro2
(v_empno in emp.empno%type)
is
v_ename emp.ename%type;
begin
select ename into v_ename from emp where ename like ('B%');
exception when no_data_found then
dbms_output.put_line('해당사항없음');
end pro2;
/
--Procedure PRO2이(가) 컴파일되었습니다.
/*===============================================================================*/
--1. 프로시저 생성 pro8
--2. 사번, 사원이름, 부서이름 같은 타입
--3. 커서이름은 result로 설정
--4. 봉급이 2000 이상인 사번, 사원이름, 부서이름을 추출한다. (부서이름 순으로)
    --(select~from~where)

create or replace procedure pro8
is
v_empno emp.empno%type;
v_ename emp.ename%type;
v_dname dept.dname%type;

cursor result is select empno, ename, dname from emp natural join dept
                where sal > 2000 order by dname;
begin
--커서 오픈
--loop 안에서 fetch(커서가 사번, 사원이름, 부서이름을 반복적으로 fetch)
--%NOTFOUND할 때까지
--커서 close
    open result;
    loop
    fetch result into v_empno, v_ename, v_dname; 
    exit when result%NOTFOUND;
    dbms_output.put_line(v_empno||''||v_ename||''||v_dname);
    end loop;
    close result;
end pro8;
/
--Procedure PRO8이(가) 컴파일되었습니다.

execute pro8;
/*
7782CLARKACCOUNTING
7888히히히RESEARCH
7788SCOTTRESEARCH
7902FORDRESEARCH
7566JONESRESEARCH
7698BLAKESALES


PL/SQL 프로시저가 성공적으로 완료되었습니다.
*/
/*===============================================================================*/

/*===============================================================================*/
--프로시저명: test11
--과목번호를 입력받는다. -> enrol의 과목번호와 같다
create or replace procedure test11
(v_sub_no in enrol.sub_no%type)

is
v_cnt number; 
cnt_error exception; --에러 변수

begin
--학생의 학번의 개수 추출하여 v_cnt에 넣는다. (과목번호가 같을 경우)
    select count(stu_no) into v_cnt from enrol
    where sub_no = v_sub_no;
    dbms_output.put_line(v_sub_no||'과목 수강자는' ||v_cnt||'명');
   
    if v_cnt=0 then
    raise cnt_error; --예외 일부러 발생
    end if;
    
    exception 
    when cnt_error then 
        dbms_output.put_line('없다');
end test11;
/
execute test11(102);
/*
102과목 수강자는2명


PL/SQL 프로시저가 성공적으로 완료되었습니다.
*/
/*===============================================================================*/

/*===============================================================================*/
create table dept_del(
userid varchar2(10),
workdate date,
deptno number(2),
dname varchar2(14),
loc varchar2(13));
--Table DEPT_DEL이(가) 생성되었습니다.

create or replace trigger dept_tri
    after delete
    on dept
    for each row
    begin
    insert into dept_del(userid, workdate, deptno, dname , loc)
    values (user, sysdate, :old.deptno, :old.dname, :old.loc);
end dept_tri;
/
--현재 sys계정이여서 안되지만 다른 계정에서는 작동한다.
/*
오류 보고 -
ORA-04089: SYS 소유의 객체에 대한 트리거를 작성할 수 없습니다
04089. 00000 -  "cannot create triggers on objects owned by SYS"
*Cause:    An attempt was made to create a trigger on an object owned by SYS.
*Action:   Do not create triggers on objects owned by SYS.
*/

delete from dept where deptno='10';

select * from dept_del;

select * from dept;
/*===============================================================================*/

/*===============================================================================*/
/*
사원(emp)테이블에 사원이 추가 삽입될 때 5000보다 급여를 많이 받으면 입력된
사원번호, 이름, 날짜를 입력해라.
*/
create table emp_sal(
empno number(4),
ename varchar2(10),
workdate date
);
--Table EMP_SAL이(가) 생성되었습니다.

create or replace trigger emp_sal_tri
    after insert
    on emp
    for each row
    begin
    if :new.sal>=5000 then
    insert into emp_sal values
    (:new.empno, :new.ename, sysdate);
    end if;
end emp_sal;
--현재 sys계정이여서 안되지만 다른 계정에서는 작동한다.
/*
오류 보고 -
ORA-04089: SYS 소유의 객체에 대한 트리거를 작성할 수 없습니다
04089. 00000 -  "cannot create triggers on objects owned by SYS"
*Cause:    An attempt was made to create a trigger on an object owned by SYS.
*Action:   Do not create triggers on objects owned by SYS.
*/
insert into emp values(3000,'aa', 'nn', 7839, sysdate, 6000, null, 10);
--1 행 이(가) 삽입되었습니다.

select * from emp_sal;
/*===============================================================================*/

/*===============================================================================*/
create table pl_test
(no number,
name varchar2(10)); --테이블 생성
--Table PL_TEST이(가) 생성되었습니다.

create sequence pl_seq; --시퀀스 생성
--Sequence PL_SEQ이(가) 생성되었습니다.

/*PL/SQL문*/
begin 
insert into pl_test
values(pl_seq.nextval, 'AAA');
end;
/
--PL/SQL 프로시저가 성공적으로 완료되었습니다.

select * from pl_test;
--1	AAA

/*PL/SQL문 한번 더 실행하면*/
--1	AAA
--2	AAA
/*===============================================================================*/

/*===============================================================================*/
--1. 프로시저 test9
--2. 과목번호를 입력받는다. (enrol과 동일타입)
set serveroutput on
create or replace procedure test9
(v_sub_no in enrol.sub_no%type)

is
--학번과 점수 선언 동일타입
v_stu_no enrol.stu_no%type;
v_enr_grade enrol.enr_grade%type;

cursor t_cursor(v_sub_no number)is
select student.stu_no, enr_grade
from student, enrol
where student.stu_no = enrol.stu_no
and enrol.sub_no = v_sub_no;

begin
    open t_cursor(v_sub_no);
    loop    --커서로 학번, 점수 가져온다. 
            -- (notfound일 때까지 출력한다.(학번과 점수) 루프 끝나고 커서 닫고, 프로시저 종료
    fetch t_cursor into v_stu_no, v_enr_grade; 
    exit when t_cursor%NOTFOUND;
    dbms_output.put_line(v_stu_no||''||v_enr_grade);
    end loop;
    close t_cursor;
end test9;
/
--Procedure TEST9이(가) 컴파일되었습니다.

execute test9(101);
/*
20131001 80
20131025 65
20153088 40


PL/SQL 프로시저가 성공적으로 완료되었습니다.
*/
/*===============================================================================*/

/*===============================================================================*/
--컴퓨터 정보과 학생들 중 평균 신장이 160이상인 학년과 평균신장을 출력해라.(group by, having)
select stu_grade, avg(stu_height) from student
where stu_dept = '컴퓨터정보'
group by stu_grade
having avg(stu_height)>=160;
/*
1	166
2	174
3	172
*/

--DALLAS 이 외 지역에 있는 부서이름 검색해라.
select dname from dept
where loc<>'DALLAS';
/*
SALES
OPERATIONS
*/

--FORD 사원보다 많은 월급 받는 사원 이름 출력
select ename, sal from emp
where sal>
    (select sal from emp 
        where ename='FORD');
/*
KING	5000
히히히	7000
aa	6000
*/

--지역이 DALLAS인 사원이름 검색(EQUI JOIN)
select ename from emp, dept
where dept.deptno = emp.deptno
and loc='DALLAS';
/*
JONES
SCOTT
FORD
SMITH
ADAMS
히히히
*/