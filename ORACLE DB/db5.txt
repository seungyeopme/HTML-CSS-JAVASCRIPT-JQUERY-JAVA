--2020.07.29

/*
CASE ~ WHEN ~ THEN ~ ELSE ~ END

[형식]
CASE 컬럼명 | 표현식 WHEN 조건식1 THEN 결과1
                                WHEN 조건식2 THEN 결과2
                                                 .......
                                WHEN 조건식n THEN 결과n 
                                ELSE 결과
             END

조건문과 조건문 사이에는 콤마(,) 를 사용하지 않는다.
CASE 문은 반드시 END 로 끝내야 한다.
CASE 표현식은 ANSI SQL 형식도 지원한다.
결과 부분은 NULL 을 사용해서는 안된다.
*/

select empno, ename, sal,
    case job when 'SALESMAN' then sal*1.1
             when 'CLERK' then sal*2.2
             else sal
    end as 급여인상
from emp;
/*
7839	KING	5000	5000
7566	JONES	2975	2975
7698	BLAKE	2850	2850
7782	CLARK	2450	2450
7788	SCOTT	3000	3000
7902	FORD	3000	3000
7499	ALLEN	1600	1760
7521	WARD	1250	1375
7654	MARTIN	1250	1375
7844	TURNER	1500	1650
7900	JAMES	950	2090
7934	MILLER	1300	2860
7369	SMITH	800	1760
7876	ADAMS	1100	2420
*/

/*
DECODE 함수
1. 구문형식
Decode( expr, search1, result1, search2, result2, …… , default_result)

2. 설명
디코드 함수는 첫번째 파라미터로 들어오는 expr 표현식을 검사하여, 
이 값이 search1에 해당할 경우 result1을 반환하고, search2에 해당하면 result2를 반환합니다. 
※ default_result는 생략될 수 있고, 모든 search값을 만족하지 않을 경우 null을 반환하게 됩니다.
※ DECODE에 사용되는 식은 동등비교만 가능합니다. (true / false)
*/

select empno, ename, job, sal,
    decode(job, 'SALESMAN', sal*1.1,
                'CLERK', sal*1.15, sal) 
    as 인상급여
from emp;
/*
7839	KING	PRESIDENT	5000	5000
7566	JONES	MANAGER	2975	2975
7698	BLAKE	MANAGER	2850	2850
7782	CLARK	MANAGER	2450	2450
7788	SCOTT	ANALYST	3000	3000
7902	FORD	ANALYST	3000	3000
7499	ALLEN	SALESMAN	1600	1760
7521	WARD	SALESMAN	1250	1375
7654	MARTIN	SALESMAN	1250	1375
7844	TURNER	SALESMAN	1500	1650
7900	JAMES	CLERK	950	1092.5
7934	MILLER	CLERK	1300	1495
7369	SMITH	CLERK	800	920
7876	ADAMS	CLERK	1100	1265
*/

--to_date =>char 타입을 date 타입으로 변경하는 방법
select empno, ename, hiredate
from emp
where hiredate=to_date('1980-12-17', 'yy-mm-dd');
--7369	SMITH	80/12/17


--학생
--전체 학생 수와 신장(키)값이 있는 학생 수 출력
select count(*), count(stu_height) 
from student;
--10	8

--체중이 60이상인 학생들만 선택하여 학과별로 그룹화하고, 그룹별 학생 수를 출력
select  stu_dept, count(*)
from student
where stu_weight >= 60
group by stu_dept;
/*
기계	1
전기전자	2
컴퓨터정보	4
*/

--최대 키가 175이상인 학과와 학과별 최대 키 출력
select max(stu_height), stu_dept
from student
group by stu_dept
having max(stu_height) >= 175;
/*
177	기계
188	전기전자
*/


--학번, 이름, 성별, 몸무게 출력
--성별이 여자면 몸무게를 -5kg
--      남자면 뭄무게를 +5kg
--(case)
select stu_no, stu_name, stu_gender, stu_weight,
case stu_gender when 'F' then stu_weight-5
                when 'M' then stu_weight+5
    else stu_weight
end as 변경된몸무게
from student;
/*
20153075 	옥한빛	M	80	85
20153088 	이태연	F	50	45
20143054 	유가인	F	47	42
20152088 	조민우	M	90	95
20142021 	심수정	F	45	40
20132003 	박희철	M	63	68
20151062 	김인중	M	67	72
20141007 	진현무	M	64	69
20131001 	김종헌	M	72	77
20131025 	옥성우	F	63	58
*/

--학번, 이름, 성별, 몸무게 출력
--성별이 여자면 몸무게를 -5kg
--      남자면 뭄무게를 +5kg
--(decode)
select stu_no, stu_name, stu_gender, stu_weight,
decode(stu_gender, 'F', stu_weight-5,
                   'M', stu_weight+5,
                   stu_weight) as 변경된몸무게
from student;
/*
20153075 	옥한빛	M	80	85
20153088 	이태연	F	50	45
20143054 	유가인	F	47	42
20152088 	조민우	M	90	95
20142021 	심수정	F	45	40
20132003 	박희철	M	63	68
20151062 	김인중	M	67	72
20141007 	진현무	M	64	69
20131001 	김종헌	M	72	77
20131025 	옥성우	F	63	58
*/

--집합연산자: union, minus, intersect

--union: 두 개 이상의 질의결과에서 중복 행을 제거하고 결과반환

create table a_student
as select *
from student
where stu_dept in('기계', '전기전자');

select * from a_student;
/*
20153075 	옥한빛	기계	1	C	M	177	80
20153088 	이태연	기계	1	C	F	162	50
20143054 	유가인	기계	2	C	F	154	47
20152088 	조민우	전기전자	1	C	M	188	90
20142021 	심수정	전기전자	2	A	F	168	45
20132003 	박희철	전기전자	3	B	M		63
*/

create table b_student
as select *
from student
where stu_dept in('전기전자', '컴퓨터정보');

select * from b_student;
/*
20152088 	조민우	전기전자	1	C	M	188	90
20142021 	심수정	전기전자	2	A	F	168	45
20132003 	박희철	전기전자	3	B	M		63
20151062 	김인중	컴퓨터정보	1	B	M	166	67
20141007 	진현무	컴퓨터정보	2	A	M	174	64
20131001 	김종헌	컴퓨터정보	3	C	M		72
20131025 	옥성우	컴퓨터정보	3	A	F	172	63
*/

--합집합
select * from a_student
union
select * from b_student;
--중복 행이 제거되고 a_student와 b_student의 합한 결과과 출력
/*
20131001 	김종헌	컴퓨터정보	3	C	M		72
20131025 	옥성우	컴퓨터정보	3	A	F	172	63
20132003 	박희철	전기전자	3	B	M		63
20141007 	진현무	컴퓨터정보	2	A	M	174	64
20142021 	심수정	전기전자	2	A	F	168	45
20143054 	유가인	기계	2	C	F	154	47
20151062 	김인중	컴퓨터정보	1	B	M	166	67
20152088 	조민우	전기전자	1	C	M	188	90
20153075 	옥한빛	기계	1	C	M	177	80
20153088 	이태연	기계	1	C	F	162	50
*/

--교집합
select * from a_student
intersect
select * from b_student;
/*
20132003 	박희철	전기전자	3	B	M		63
20142021 	심수정	전기전자	2	A	F	168	45
20152088 	조민우	전기전자	1	C	M	188	90
*/

--차집합
select * from a_student
minus
select * from b_student;
/*
20143054 	유가인	기계	2	C	F	154	47
20153075 	옥한빛	기계	1	C	M	177	80
20153088 	이태연	기계	1	C	F	162	50
*/


1.	상급자사원번호가 7698 또는 7839인 사원의 사원번호와 사원이름을 검색하라.
select empno, ename from emp
where mgr = 7698 or mgr = 7839;
/*
7566	JONES
7698	BLAKE
7782	CLARK
7499	ALLEN
7521	WARD
7654	MARTIN
7844	TURNER
7900	JAMES
*/

2.	사원직무가 ‘MANAGER’ 또는 ‘SALESMAN’인 사원의 사원번호, 사원이름, 부서번호를 검색하라.
select empno, ename, deptno from emp
where job = 'MANAGER' or job = 'SALESMAN';
/*
7566	JONES	20
7698	BLAKE	30
7782	CLARK	10
7499	ALLEN	30
7521	WARD	30
7654	MARTIN	30
7844	TURNER	30
*/

3.	사원들의 사원번호와 사원이름을 사원번호 순으로 검색하라.
select empno, ename from emp
order by empno;
/*
7369	SMITH
7499	ALLEN
7521	WARD
7566	JONES
7654	MARTIN
7698	BLAKE
7782	CLARK
7788	SCOTT
7839	KING
7844	TURNER
7876	ADAMS
7900	JAMES
7902	FORD
7934	MILLER
*/

4.	사원들의 사원번호와 사원이름을 부서번호별 이름순으로 검색하라.
select empno, ename from emp
order by deptno, ename;
/*
7782	CLARK
7839	KING
7934	MILLER
7876	ADAMS
7902	FORD
7566	JONES
7788	SCOTT
7369	SMITH
7499	ALLEN
7698	BLAKE
7900	JAMES
7654	MARTIN
7844	TURNER
7521	WARD
*/
5.	사원들의 정보를 부서별 급여가 많은 순으로 검색하라.
select * from emp 
order by deptno, sal;
/*
7934	MILLER	CLERK	7782	82/01/23	1300		10
7782	CLARK	MANAGER	7839	81/06/09	2450		10
7839	KING	PRESIDENT		81/11/17	5000		10
7369	SMITH	CLERK	7902	80/12/17	800		20
7876	ADAMS	CLERK	7788	87/07/13	1100		20
7566	JONES	MANAGER	7839	81/04/02	2975		20
7788	SCOTT	ANALYST	7566	87/07/13	3000		20
7902	FORD	ANALYST	7566	81/12/03	3000		20
7900	JAMES	CLERK	7698	81/12/03	950		30
7654	MARTIN	SALESMAN	7698	81/09/28	1250	1400	30
7521	WARD	SALESMAN	7698	81/02/22	1250	500	30
7844	TURNER	SALESMAN	7698	81/09/08	1500	0	30
7499	ALLEN	SALESMAN	7698	81/02/20	1600	300	30
7698	BLAKE	MANAGER	7839	81/05/01	2850		30
*/

6.	사원들의 정보를 사원직무별 급여 순으로 검색하라.
select * from emp 
order by job, sal;
/*
7902	FORD	ANALYST	7566	81/12/03	3000		20
7788	SCOTT	ANALYST	7566	87/07/13	3000		20
7369	SMITH	CLERK	7902	80/12/17	800		20
7900	JAMES	CLERK	7698	81/12/03	950		30
7876	ADAMS	CLERK	7788	87/07/13	1100		20
7934	MILLER	CLERK	7782	82/01/23	1300		10
7782	CLARK	MANAGER	7839	81/06/09	2450		10
7698	BLAKE	MANAGER	7839	81/05/01	2850		30
7566	JONES	MANAGER	7839	81/04/02	2975		20
7839	KING	PRESIDENT		81/11/17	5000		10
7521	WARD	SALESMAN	7698	81/02/22	1250	500	30
7654	MARTIN	SALESMAN	7698	81/09/28	1250	1400	30
7844	TURNER	SALESMAN	7698	81/09/08	1500	0	30
7499	ALLEN	SALESMAN	7698	81/02/20	1600	300	30
*/

7.	사원들의 정보를 부서번호별, 사원직무별, 급여 순으로 검색하라.
select * from emp
order by deptno, job, sal;
/*
7934	MILLER	CLERK	7782	82/01/23	1300		10
7782	CLARK	MANAGER	7839	81/06/09	2450		10
7839	KING	PRESIDENT		81/11/17	5000		10
7788	SCOTT	ANALYST	7566	87/07/13	3000		20
7902	FORD	ANALYST	7566	81/12/03	3000		20
7369	SMITH	CLERK	7902	80/12/17	800		20
7876	ADAMS	CLERK	7788	87/07/13	1100		20
7566	JONES	MANAGER	7839	81/04/02	2975		20
7900	JAMES	CLERK	7698	81/12/03	950		30
7698	BLAKE	MANAGER	7839	81/05/01	2850		30
7521	WARD	SALESMAN	7698	81/02/22	1250	500	30
7654	MARTIN	SALESMAN	7698	81/09/28	1250	1400	30
7844	TURNER	SALESMAN	7698	81/09/08	1500	0	30
7499	ALLEN	SALESMAN	7698	81/02/20	1600	300	30
*/

8.	사원들의 사원이름을 소문자로 검색하라.
select ename, lower(ename) from emp;
/*
KING	king
JONES	jones
BLAKE	blake
CLARK	clark
SCOTT	scott
FORD	ford
ALLEN	allen
WARD	ward
MARTIN	martin
TURNER	turner
JAMES	james
MILLER	miller
SMITH	smith
ADAMS	adams
*/

9.	사원들의 사원이름, 사원직무를 소문자로 검색하라.
select lower(ename), lower(job) from emp;
/*
king	president
jones	manager
blake	manager
clark	manager
scott	analyst
ford	analyst
allen	salesman
ward	salesman
martin	salesman
turner	salesman
james	clerk
miller	clerk
smith	clerk
adams	clerk
*/

10.	사원들의 사원이름을 대문자로 검색하라.
select upper(ename) from emp;
/*
KING
JONES
BLAKE
CLARK
SCOTT
FORD
ALLEN
WARD
MARTIN
TURNER
JAMES
MILLER
SMITH
ADAMS
*/

11.	사원들의 사원이름, 사원직무를 대문자로 검색하라.
/*
select upper(ename), upper(job) from emp;
KING	PRESIDENT
JONES	MANAGER
BLAKE	MANAGER
CLARK	MANAGER
SCOTT	ANALYST
FORD	ANALYST
ALLEN	SALESMAN
WARD	SALESMAN
MARTIN	SALESMAN
TURNER	SALESMAN
JAMES	CLERK
MILLER	CLERK
SMITH	CLERK
ADAMS	CLERK
*/

12.	사원들의 사원이름을 첫자만 대문자로 검색하라.
select initcap(ename) from emp;
/*
King
Jones
Blake
Clark
Scott
Ford
Allen
Ward
Martin
Turner
James
Miller
Smith
Adams
*/

13.	사원들의 사원이름과 사원직무를 첫 자만 대문자로 검색하라.
select initcap(ename), initcap(job) from emp;
/*
King	President
Jones	Manager
Blake	Manager
Clark	Manager
Scott	Analyst
Ford	Analyst
Allen	Salesman
Ward	Salesman
Martin	Salesman
Turner	Salesman
James	Clerk
Miller	Clerk
Smith	Clerk
Adams	Clerk
*/

14.	사원들의 사원이름과 사원직무를 연결하여 검색하라.(concat이용)
select concat(ename, job) from emp;
/*
KINGPRESIDENT
JONESMANAGER
BLAKEMANAGER
CLARKMANAGER
SCOTTANALYST
FORDANALYST
ALLENSALESMAN
WARDSALESMAN
MARTINSALESMAN
TURNERSALESMAN
JAMESCLERK
MILLERCLERK
SMITHCLERK
ADAMSCLERK
*/

15.	사원들의 사원이름과 사원이름의 첫 두글자를 검색하라.
select ename, substr(ename,1,2) from emp;
/*
KING	KI
JONES	JO
BLAKE	BL
CLARK	CL
SCOTT	SC
FORD	FO
ALLEN	AL
WARD	WA
MARTIN	MA
TURNER	TU
JAMES	JA
MILLER	MI
SMITH	SM
ADAMS	AD
*/

16.	사원들의 사원이름, 사원직무 그리고 사원직무의 두번째부터 세글자를 검색하라.
select ename, job, substr(job, 2,3) from emp;
/*
KING	PRESIDENT	RES
JONES	MANAGER	ANA
BLAKE	MANAGER	ANA
CLARK	MANAGER	ANA
SCOTT	ANALYST	NAL
FORD	ANALYST	NAL
ALLEN	SALESMAN	ALE
WARD	SALESMAN	ALE
MARTIN	SALESMAN	ALE
TURNER	SALESMAN	ALE
JAMES	CLERK	LER
MILLER	CLERK	LER
SMITH	CLERK	LER
ADAMS	CLERK	LER
*/

17.	사원들의 사원이름과 사원이름의 길이를 검색하라.
select ename,length(ename) from emp;
/*
KING	4
JONES	5
BLAKE	5
CLARK	5
SCOTT	5
FORD	4
ALLEN	5
WARD	4
MARTIN	6
TURNER	6
JAMES	5
MILLER	6
SMITH	5
ADAMS	5
*/

18.	사원들의 사원이름과 사원직무의 자리수를 검색하라.
select count(ename), count(job) from emp;
--14	14

19.	사원들의 사원이름에 ‘A’가 몇번 째 위치에 있는지 검색하라.
select ename,instr(ename, 'A') from emp;
/*
KING	0
JONES	0
BLAKE	3
CLARK	3
SCOTT	0
FORD	0
ALLEN	1
WARD	2
MARTIN	2
TURNER	0
JAMES	2
MILLER	0
SMITH	0
ADAMS	1
*/

20. 사원직무에 ‘A’가 몇번 째 위치에 있는지 검색하라.
select job,instr(job, 'A') from emp;
/*
PRESIDENT	0
MANAGER	2
MANAGER	2
MANAGER	2
ANALYST	1
ANALYST	1
SALESMAN	2
SALESMAN	2
SALESMAN	2
SALESMAN	2
CLERK	0
CLERK	0
CLERK	0
CLERK	0
*/

select deptno, count(*)
from emp
group by deptno;
/*
30	6
10	3
20	5
*/

select deptno, ename
from emp
group by deptno;
--실행 안됨

select deptno, avg(sal)
from emp
group by deptno;
/*
30	1566.666666666666666666666666666666666667
10	2916.666666666666666666666666666666666667
20	2175
*/

select job, deptno
from emp
group by deptno;
--실행 안됨

21. 사원이름을 15자리로 하고, 뒤에 ‘&’를채워 검색하라.
select rpad(ename,15,'&') from emp; 
/*
KING&&&&&&&&&&&
JONES&&&&&&&&&&
BLAKE&&&&&&&&&&
CLARK&&&&&&&&&&
SCOTT&&&&&&&&&&
FORD&&&&&&&&&&&
ALLEN&&&&&&&&&&
WARD&&&&&&&&&&&
MARTIN&&&&&&&&&
TURNER&&&&&&&&&
JAMES&&&&&&&&&&
MILLER&&&&&&&&&
SMITH&&&&&&&&&&
ADAMS&&&&&&&&&&
*/

22. 사원직무를 20자리로 하고, 앞에 ‘%’를채워 검색하라.
select lpad(job, 20, '%') from emp;
/*
%%%%%%%%%%%PRESIDENT
%%%%%%%%%%%%%MANAGER
%%%%%%%%%%%%%MANAGER
%%%%%%%%%%%%%MANAGER
%%%%%%%%%%%%%ANALYST
%%%%%%%%%%%%%ANALYST
%%%%%%%%%%%%SALESMAN
%%%%%%%%%%%%SALESMAN
%%%%%%%%%%%%SALESMAN
%%%%%%%%%%%%SALESMAN
%%%%%%%%%%%%%%%CLERK
%%%%%%%%%%%%%%%CLERK
%%%%%%%%%%%%%%%CLERK
%%%%%%%%%%%%%%%CLERK
*/

23. 사원의 사원번호, 사원이름, 급여를 검색하라.(급여는두번째 자리에서 반올림함)
select empno, ename, round(sal,-2) from emp;
/*
7839	KING	5000
7566	JONES	3000
7698	BLAKE	2900
7782	CLARK	2500
7788	SCOTT	3000
7902	FORD	3000
7499	ALLEN	1600
7521	WARD	1300
7654	MARTIN	1300
7844	TURNER	1500
7900	JAMES	1000
7934	MILLER	1300
7369	SMITH	800
7876	ADAMS	1100
*/

24. 사원의 사원번호, 사원이름, 급여를 검색하라.(급여는두번째 자리에서 절삭함)
select empno, ename, trunc(sal,1) from emp;
/*
7839	KING	5000
7566	JONES	2975
7698	BLAKE	2850
7782	CLARK	2450
7788	SCOTT	3000
7902	FORD	3000
7499	ALLEN	1600
7521	WARD	1250
7654	MARTIN	1250
7844	TURNER	1500
7900	JAMES	950
7934	MILLER	1300
7369	SMITH	800
7876	ADAMS	1100
*/

25. 사원번호와급여를 100으로 나눈 나머지를 검색하라.
select empno,mod(empno,100),sal, mod(sal,100) from emp;
/*
7839	39	5000	0
7566	66	2975	75
7698	98	2850	50
7782	82	2450	50
7788	88	3000	0
7902	2	3000	0
7499	99	1600	0
7521	21	1250	50
7654	54	1250	50
7844	44	1500	0
7900	0	950	50
7934	34	1300	0
7369	69	800	0
7876	76	1100	0
*/

26. 사원번호, 사원이름, 입사일, 입사후 100일의 날짜를 검색하라.
select empno, ename, hiredate, hiredate+100 from emp;
/*
7839	KING	81/11/17	82/02/25
7566	JONES	81/04/02	81/07/11
7698	BLAKE	81/05/01	81/08/09
7782	CLARK	81/06/09	81/09/17
7788	SCOTT	87/07/13	87/10/21
7902	FORD	81/12/03	82/03/13
7499	ALLEN	81/02/20	81/05/31
7521	WARD	81/02/22	81/06/02
7654	MARTIN	81/09/28	82/01/06
7844	TURNER	81/09/08	81/12/17
7900	JAMES	81/12/03	82/03/13
7934	MILLER	82/01/23	82/05/03
7369	SMITH	80/12/17	81/03/27
7876	ADAMS	87/07/13	87/10/21
*/

27. 사원번호,  사원이름, 입사일, 근무 일자를 계산하여 검색하라.
select empno, ename, hiredate,
trunc(sysdate-hiredate, 0)
from emp;
--오늘 날짜에서 입사일을 빼준다.
/*
7839	KING	81/11/17	14134
7566	JONES	81/04/02	14363
7698	BLAKE	81/05/01	14334
7782	CLARK	81/06/09	14295
7788	SCOTT	87/07/13	12070
7902	FORD	81/12/03	14118
7499	ALLEN	81/02/20	14404
7521	WARD	81/02/22	14402
7654	MARTIN	81/09/28	14184
7844	TURNER	81/09/08	14204
7900	JAMES	81/12/03	14118
7934	MILLER	82/01/23	14067
7369	SMITH	80/12/17	14469
7876	ADAMS	87/07/13	12070
*/

28. 사원들의 입사일에서 3달째 되는 날짜를 검색하라.
select add_months(hiredate,3) from emp;
/*
82/02/17
81/07/02
81/08/01
81/09/09
87/10/13
82/03/03
81/05/20
81/05/22
81/12/28
81/12/08
82/03/03
82/04/23
81/03/17
87/10/13
*/
29. 사원들의 입사일다음 토요일의 날짜를 검색하라.
select next_day(hiredate,7) from emp;
--1:일 , 2:월, 3:화, 4:수, 5:목, 6:금, 7:토
/*
81/11/21
81/04/04
81/05/02
81/06/13
87/07/18
81/12/05
81/02/21
81/02/28
81/10/03
81/09/12
81/12/05
82/01/30
80/12/20
87/07/18
*/

30. 사원들의 입사월의마지막 날짜를 검색하라.
select last_day(hiredate) from emp;
/*
81/11/30
81/04/30
81/05/31
81/06/30
87/07/31
81/12/31
81/02/28
81/02/28
81/09/30
81/09/30
81/12/31
82/01/31
80/12/31
87/07/31
*/

/*
MERGE 문 
 MERGE문은 조건을 비교해서 테이블에 조건에 맞는 데이터가 없으면 INSERT, 
 있으면 UPDATE문을 수행할 수 있습니다.
 
기본 사용법
MERGE INTO 조작할 테이블명
     USING (데이터)
        ON (조건)
        
WHEN MATCHED THEN
       UPDATE SET 컬럼1 = 값1, 컬럼2 = 값2, ...
     DELETE WHERE (조건)
 
WHEN NOT MATCHED THEN 
               INSERT (컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...)
                WHERE 조건;
 MERGE INTO 절에는 조작할 테이블명, USING 절에는 MERGE문에서 사용할 데이터 쿼리, 
 ON 절에는 처리가 분기될 조건을 입력합니다. 
 ON 조건을 만족한다면 WHEN MATCHED THEN 절을 실행하여 UPDATE, DELETE를 실행하고 
 만족하지 않다면 INSERT를 실행합니다.
*/

/*
--<merge into>
merge into a_student a (데이터가 update, insert 될 테이블 명)
      using student s  (비교할 테이블)
on (s.stu_no = a.stu_no) -> update, insert 하게 될 조건을 의미

merge문은 using절의 테이블에 행이 존재하면 update, 존재하지 않으면 insert문 실행
데이터 이동 작업을 할 경우 유용하게 쓰인다.
*/
     
merge into a_student a
    using student s 
on (s.stu_no = a.stu_no)                    
when matched then
 update set a.stu_weight=s.stu_weight
when not matched then
 insert values(s.stu_no,s.stu_name,s.stu_dept,null,null,null,null,s.stu_weight);

31. 부서별 사원들의평균 급여를 검색하라.
select deptno, avg(sal) from emp
group by deptno;
/*
30	1566.666666666666666666666666666666666667
10	2916.666666666666666666666666666666666667
20	2175
*/

32. 부서별 사원들의급여의 표준편차를 검색하라.
select stddev(sal) from emp
group by deptno;
/*
668.331255192114045025291283415053677345
1893.629671644731419588549193663502608485
1123.332096933048557320586159803793607308
*/

33. 부서별 사원직무별사원의 급여 합을 검색하라.
select sum(sal) from emp
group by deptno;
/*
9400
8750
10875
*/

34. 부서별 사원직무별사원들의 평균 급여를 검색하라.
select job, avg(sal) from emp
group by job;
/*
ANALYST	3000
SALESMAN	1400
CLERK	1037.5
MANAGER	2758.333333333333333333333333333333333333
PRESIDENT	5000
*/

35. 부서별 사원직무별사원들의 입사일이 MAX와 MIN값을 검색하라.
select job, max(hiredate), min(hiredate) from emp
group by job;
/*
ANALYST	87/07/13	81/12/03
SALESMAN	81/09/28	81/02/20
CLERK	87/07/13	80/12/17
MANAGER	81/06/09	81/04/02
PRESIDENT	81/11/17	81/11/17
*/

36. 부서별 사원들의인원수를 인원수가 많은 순으로 검색하라.
select deptno, count(*) from emp 
group by deptno order by count(*) desc;
/*
30	6
20	5
10	3
*/
37. 부서별 사원들의평균 급여를 평균 급여 순으로 검색하라.
select avg(sal) from emp 
group by deptno order by avg(sal);
/*
1566.666666666666666666666666666666666667
2175
2916.666666666666666666666666666666666667
*/

38. 부서별, 사원직무별 사원의 급여 합을 많은 순으로 검색하라.
select deptno, job, sum(sal) from emp 
group by deptno,job order by sum(sal) desc;
/*
20	ANALYST	6000
30	SALESMAN	5600
10	PRESIDENT	5000
20	MANAGER	2975
30	MANAGER	2850
10	MANAGER	2450
20	CLERK	1900
10	CLERK	1300
30	CLERK	950
*/
39. 부서별, 사원직무별 사원들의 평균 급여를 평균 급여가 많은 순으로 검색하라.
select deptno, job, avg(sal) from emp 
group by deptno,job order by avg(sal) desc;
/*
10	PRESIDENT	5000
20	ANALYST	3000
20	MANAGER	2975
30	MANAGER	2850
10	MANAGER	2450
30	SALESMAN	1400
10	CLERK	1300
20	CLERK	950
30	CLERK	950
*/

40. 사원들의 입사일을 년을 기준으로 반올림하여 검색하라.
select round(hiredate, 'year') from emp;
/*
82/01/01
81/01/01
81/01/01
81/01/01
88/01/01
82/01/01
81/01/01
81/01/01
82/01/01
82/01/01
82/01/01
82/01/01
81/01/01
88/01/01
*/
41. 사원들의 입사일을 년을 기준으로 절삭하여 검색하라.
select trunc(hiredate, 'year') from emp;

42. 상급자사원번호(mgr)가 없는 사원의 경우 ‘상급자 없음’을 나타내도록 하는 질의문을 작성해라. 
select nvl(to_char(mgr),'상급자 없음') from emp;
/*
상급자 없음
7839
7839
7839
7566
7566
7698
7698
7698
7698
7698
7782
7902
7788
*/

select ename, empno, nvl(to_char(mgr), '상급자 없음') from emp;
/*
KING	7839	상급자 없음
JONES	7566	7839
BLAKE	7698	7839
CLARK	7782	7839
SCOTT	7788	7566
FORD	7902	7566
ALLEN	7499	7698
WARD	7521	7698
MARTIN	7654	7698
TURNER	7844	7698
JAMES	7900	7698
MILLER	7934	7782
SMITH	7369	7902
ADAMS	7876	7788
*/

43. 커미션(comm)을 포함한 급여를 사원번호, 사원이름과 함께 검색하라.
select empno, ename, sal+nvl(comm,0) from emp;
/*
7839	KING	5000
7566	JONES	2975
7698	BLAKE	2850
7782	CLARK	2450
7788	SCOTT	3000
7902	FORD	3000
7499	ALLEN	1900
7521	WARD	1750
7654	MARTIN	2650
7844	TURNER	1500
7900	JAMES	950
7934	MILLER	1300
7369	SMITH	800
7876	ADAMS	1100
*/

44. 커미션을 포함한 연봉을 사원번호, 사원이름과 함께 검색하라.
select empno, ename, (sal+nvl(comm,0))*12 as 커미션포함연봉 from emp;
/*
7839	KING	60000
7566	JONES	35700
7698	BLAKE	34200
7782	CLARK	29400
7788	SCOTT	36000
7902	FORD	36000
7499	ALLEN	22800
7521	WARD	21000
7654	MARTIN	31800
7844	TURNER	18000
7900	JAMES	11400
7934	MILLER	15600
7369	SMITH	9600
7876	ADAMS	13200
*/

/*
TCL(Transaction Control Language)
: 사용자에 의해 실행된 SQL문의 집합을 의미
  변경된 데이터는 TCL에 의해 데이터베이스에 반영되어야 한다.
  (무결성=정확성을 유지하기 위해 필요)
*/

select * from b_student;
/*
20152088 	조민우	전기전자	1	C	M	188	90
20142021 	심수정	전기전자	2	A	F	168	45
20132003 	박희철	전기전자	3	B	M		63
20151062 	김인중	컴퓨터정보	1	B	M	166	67
20141007 	진현무	컴퓨터정보	2	A	M	174	64
20131001 	김종헌	컴퓨터정보	3	C	M		72
20131025 	옥성우	컴퓨터정보	3	A	F	172	63
*/

--b_student의 내용 삭제
delete from b_student;

select * from b_student;
--테이블은 남아있지만, 데이터 값이 모두 삭제 되어 있다.


rollback; --롤백 완료. --rollback: delete 작업이 철회된다.
select * from b_student; --rollback을 해서 다시 데이터가 보여지고 있다.
/*
20152088 	조민우	전기전자	1	C	M	188	90
20142021 	심수정	전기전자	2	A	F	168	45
20132003 	박희철	전기전자	3	B	M		63
20151062 	김인중	컴퓨터정보	1	B	M	166	67
20141007 	진현무	컴퓨터정보	2	A	M	174	64
20131001 	김종헌	컴퓨터정보	3	C	M		72
20131025 	옥성우	컴퓨터정보	3	A	F	172	63
*/

commit; --커밋 완료.

select count(*)from student;
/*10*/

select count(stu_dept), count(distinct stu_dept)from student;
/*10	3*/

--학과별로 그룹화하여 학과별 평균 체중 추출
select stu_dept, avg(stu_weight) from student
group by stu_dept;
/*
기계	59
전기전자	66
컴퓨터정보	66.5
*/

--기계과 학생들 중 학년별 평균키가 160이상인 학년과 평균 신장 추출
select avg(stu_height), stu_grade from student
where stu_dept = '기계'
group by stu_grade
having avg(stu_height) >= 160;
/*169.5	1*/

--상급자사원번호가 NULL인 경우 'CEO'로 바꾸어 사원번호, 사원이름, 상급자사원번호를 검색하라.
select empno, ename, mgr, nvl(to_char(mgr), 'CEO') from emp;
/*
7839	KING		CEO
7566	JONES	7839	7839
7698	BLAKE	7839	7839
7782	CLARK	7839	7839
7788	SCOTT	7566	7566
7902	FORD	7566	7566
7499	ALLEN	7698	7698
7521	WARD	7698	7698
7654	MARTIN	7698	7698
7844	TURNER	7698	7698
7900	JAMES	7698	7698
7934	MILLER	7782	7782
7369	SMITH	7902	7902
7876	ADAMS	7788	7788
*/

--컴퓨터정보 학과와 같은 반인 다른학과의 학생 정보를 In을 이용하여 추출
select * from student
where stu_class in
    (select stu_class 
    from student
    where stu_dept='컴퓨터정보')
    and stu_dept<>'컴퓨터정보';
/*
20132003 	박희철	전기전자	3	B	M		63
20142021 	심수정	전기전자	2	A	F	168	45
20153075 	옥한빛	기계	1	C	M	177	80
20153088 	이태연	기계	1	C	F	162	50
20143054 	유가인	기계	2	C	F	154	47
20152088 	조민우	전기전자	1	C	M	188	90
*/

45. 10, 20번부서 사원들 중 최고 급여를 받는 사원의 사원번호, 사원이름, 급여를검색하라. (부질의)
--10,20번 -> 그룹핑의 조건
--최고 급여 -> 조건
select deptno, empno, ename, sal from emp 
where sal in
    (select max(sal) from emp 
    group by deptno 
    having deptno=10 or deptno=20);
/*
10	7839	KING	5000
20	7788	SCOTT	3000
20	7902	FORD	3000
*/

46. 30번 부서의사원 중 최저 급여를 받는 사원의 사원번호, 사원이름, 급여를검색하라. (부질의)
/*
select deptno, empno, ename, sal from emp 
where sal in
    (select min(sal) from emp 
    group by deptno 
    having deptno=30);
*/
--30	7900	JAMES	950

47. 전체 사원들중 최고 커미션을 받는 사원의 사원번호, 사원이름, 커미션을검색하라. (부질의)
select empno, ename, comm from emp 
where comm in
(select max(comm) from emp);
--7654	MARTIN	1400

48. 전체 사원들중 최저 커미션을 받는 사원의 사원번호, 사원이름, 커미션을검색하라. (부질의)
select empno, ename, comm from emp 
where comm in
    (select min(comm) from emp);
--7844	TURNER	0

49. 전체 사원의 사원이름 중 MAX와 MIN값을 검색하라.
select max(ename), min(ename) from emp;
--WARD	ADAMS

50. 전체 사원의입사일 중 MAX와 MIN값을 검색하라.
select max(hiredate), min(hiredate) from emp;
--87/07/13	80/12/17

--사원 이름의 개수 추출
select count(ename) from emp;
--14

--사원테이블의 튜플 수 검색  --튜플 = 행 
select count(*)from emp;
--14

--부서별 사원들의 인원수 검색
select deptno, count(deptno) from emp
group by deptno;
/*
30	6
10	3
20	5
*/

--상급자사원번호별 사원들의 인원 수 검색
select count(mgr) from emp
group by mgr;
/*
1
1
5
2
1
0
3
*/

--equi 조인, 가장 많이 사용한다.
select student.stu_no from student, enrol
where student.stu_no=enrol.stu_no;
/*
20131001 
20131025 
20153075 
20153088 
20152088 
20131001 
20131025 
20153075 
20153088 
20132003 
20143054 
20151062 
*/

--natural 조인
select stu_no from student natural join enrol;
/*
20131001 
20131025 
20153075 
20153088 
20152088 
20131001 
20131025 
20153075 
20153088 
20132003 
20143054 
20151062 
*/

--join using 조인
select stu_no from student join enrol using(stu_no);
/*
20131001 
20131025 
20153075 
20153088 
20152088 
20131001 
20131025 
20153075 
20153088 
20132003 
20143054 
20151062 
*/

--체중이 60이상인 학생이 수강하는 과목의 과목이름을 모두 검색하라. (equi join)
select sub_name from subject, student, enrol
where student.stu_no = enrol.stu_no 
and enrol.sub_no  = subject.sub_no 
and student.stu_weight >= 60;
/*
컴퓨터개론
컴퓨터개론
기계공작법
기초전자실험
시스템분석설계
시스템분석설계
기계요소설계
전자회로실험
소프트웨어공학
*/

--컴퓨터정보과에 개설된 과목을 수강하는 모든 학생의 학번과 이름을 검색하라.
select student.stu_no, stu_name
from student, subject, enrol
where student.stu_no = enrol.stu_no 
and enrol.sub_no  = subject.sub_no  
and sub_dept = '컴퓨터정보';
/*
20131001 	김종헌
20131025 	옥성우
20151062 	김인중
*/

--여학생이면서 구봉규 교수의 과목을 수강하는 학생의 이름을 검색하라.
select stu_name
from student, enrol, subject
where student.stu_no = enrol.stu_no 
and enrol.sub_no  = subject.sub_no  
and student.stu_gender = 'F' 
and subject.sub_prof = '구봉규';
--유가인

/*<constraint 제약조건>
: 데이터베이스 상태가 항상 만족해야 할 기본 규칙

1)도메인 제약 조건
2)키 제약 조건 : 테이블에서 각 튜플을 유일하게 식별할 수 있는 수단(기본키)
3)무결성 제약 조건 : 기본키에 있는 속성 값들은 어떠한 경우에도 널 값을 가질 수 없다!!!
                    
UNIQUE KEY: 열 또는 열 조합이 유일성(유일한 값)을 가져야 한다.
PRIMARY KEY: (NOT NULL+UNIQUE) 열에 NULL 값 허용 안됨, 유일성 가져야 함.
FOREIGN KEY : 해당 컬럼에 참조하는 테이블로부터 존재하는 값들만 사용한다는 의미의 제약조건
            
constraint stu_no NOT NULL; //학번은 널 값이 되어서는 안된다.
*/

create table t_student(
stu_no char(9),
stu_name varchar2(12)
constraint u_stu_name unique,
stu_dept varchar2(20)
constraint n_stu_dept not null,
stu_grade number(1),
stu_class char(1),
stu_gender char(1),
stu_height number(5,2),
stu_weight number(5,2),
constraint pt_stu_no
primary key(stu_no));

--t_enrol 테이블 생성
--sub_no 고정된 길이 3,
--stu_no 고정된 길이 9,
--enr_grade 숫자 3
--기본키를 sub_no와 stu_no로 준다
create table t_enrol(
    sub_no char(3),
    stu_no char(9),
    enr_grade number(3),
        constraint p_enrol primary key(sub_no, stu_no));
        
/*<제약 조건 삭제>*/
alter table t_enrol
drop constraint p_enrol cascade;

/*<제약 조건의 활성화, 비활성화>*/
alter table t_student
disable constraint n_stu_dept; --비활성화

alter table t_student
enable constraint n_stu_dept; --활성화

51. 사원 테이블과 부서 테이블을 natural join해라.
select * from emp natural join dept;
/*
10	7839	KING	PRESIDENT		81/11/17	5000		ACCOUNTING	NEW YORK
20	7566	JONES	MANAGER	7839	81/04/02	2975		RESEARCH	DALLAS
30	7698	BLAKE	MANAGER	7839	81/05/01	2850		SALES	CHICAGO
10	7782	CLARK	MANAGER	7839	81/06/09	2450		ACCOUNTING	NEW YORK
20	7788	SCOTT	ANALYST	7566	87/07/13	3000		RESEARCH	DALLAS
20	7902	FORD	ANALYST	7566	81/12/03	3000		RESEARCH	DALLAS
30	7499	ALLEN	SALESMAN	7698	81/02/20	1600	300	SALES	CHICAGO
30	7521	WARD	SALESMAN	7698	81/02/22	1250	500	SALES	CHICAGO
30	7654	MARTIN	SALESMAN	7698	81/09/28	1250	1400	SALES	CHICAGO
30	7844	TURNER	SALESMAN	7698	81/09/08	1500	0	SALES	CHICAGO
30	7900	JAMES	CLERK	7698	81/12/03	950		SALES	CHICAGO
10	7934	MILLER	CLERK	7782	82/01/23	1300		ACCOUNTING	NEW YORK
20	7369	SMITH	CLERK	7902	80/12/17	800		RESEARCH	DALLAS
20	7876	ADAMS	CLERK	7788	87/07/13	1100		RESEARCH	DALLAS
*/

52. 사원번호, 사원이름, 부서이름을 검색하라.(equi)
select empno, ename, dname from dept, emp where dept.deptno = emp.deptno;
/*
7839	KING	ACCOUNTING
7566	JONES	RESEARCH
7698	BLAKE	SALES
7782	CLARK	ACCOUNTING
7788	SCOTT	RESEARCH
7902	FORD	RESEARCH
7499	ALLEN	SALES
7521	WARD	SALES
7654	MARTIN	SALES
7844	TURNER	SALES
7900	JAMES	SALES
7934	MILLER	ACCOUNTING
7369	SMITH	RESEARCH
7876	ADAMS	RESEARCH
*/

53. 사원번호, 사원이름, 부서이름을 검색하라.(natural)
select empno, ename, dname from dept natural join emp;
/*
7839	KING	ACCOUNTING
7566	JONES	RESEARCH
7698	BLAKE	SALES
7782	CLARK	ACCOUNTING
7788	SCOTT	RESEARCH
7902	FORD	RESEARCH
7499	ALLEN	SALES
7521	WARD	SALES
7654	MARTIN	SALES
7844	TURNER	SALES
7900	JAMES	SALES
7934	MILLER	ACCOUNTING
7369	SMITH	RESEARCH
7876	ADAMS	RESEARCH
*/

54. 사원번호, 사원이름, 부서이름을 검색하라.(join~using)
select empno, ename, dname from dept join emp using(deptno); 
/*
7839	KING	ACCOUNTING
7566	JONES	RESEARCH
7698	BLAKE	SALES
7782	CLARK	ACCOUNTING
7788	SCOTT	RESEARCH
7902	FORD	RESEARCH
7499	ALLEN	SALES
7521	WARD	SALES
7654	MARTIN	SALES
7844	TURNER	SALES
7900	JAMES	SALES
7934	MILLER	ACCOUNTING
7369	SMITH	RESEARCH
7876	ADAMS	RESEARCH
*/

55. 지역이 NEW YORK인 사원이름을 검색하라.(equi)
select ename from emp,dept 
where dept.deptno = emp.deptno
and loc = 'NEW YORK';
/*
KING
CLARK
MILLER
*/